<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<LangVersion>12</LangVersion>
		<Nullable>enable</Nullable>
		<EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
		
		<Title>ZourceGen</Title>
		<Authors>Zoe</Authors>
		<Version>1.0.2</Version>
		<Description>An attempt at a rather verbose tModLoader asset generator.</Description>
		
		<RepositoryUrl>https://github.com/ZenTheMod/ZourceGen</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
	</PropertyGroup>
	
	<!-- Specifics about the packages used can be found here
		https://posts.specterops.io/dotnet-source-generators-in-2024-part-1-getting-started-76d619b633f5 -->
	<ItemGroup>
		<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="4.13.0.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.13.0.0" />
		
		<PackageReference Include="PolySharp" Version="*">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>
	
	<!-- Include a reference to a slightly modified version of tomat's fork of ShaderDecompiler
		https://github.com/ZenTheMod/shader-reader/ -->
	<ItemGroup>
		<Compile Remove="shader-reader/**" />
		<ProjectReference Include="shader-reader\ShaderDecompiler.csproj" ReferenceOutputAssembly="true" IncludeAssets="ShaderDecompiler.dll" />
	</ItemGroup>

	<PropertyGroup>
		<TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
	</PropertyGroup>

	<Target DependsOnTargets="ResolveReferences" Name="CopyProjectReferencesToPackage">
		<ItemGroup>
			<BuildOutputInPackage Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))"/>
		</ItemGroup>
	</Target>

	<Target Name="AddNuGetDlls" BeforeTargets="_GetPackageFiles">
		<!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
           This produces a new list containing the DLL path and the "IncludeInPackage" metadata-->
		<JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*"
				   Right="@(PackageReference)" RightKey="" RightMetadata="*"
				   ItemSpecToUse="Left">
			<Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
		</JoinItems>

		<ItemGroup>
			<!-- Remove NETStandard DLLs -->
			<_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(NuGetPackageId) == 'NETStandard.Library'" />
			<_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(_PackagesToPack.IncludeInPackage) != 'true'" />
		</ItemGroup>

		<Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />

		<ItemGroup>
			<!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
			<None Include="@(_PackagesToPack)"
				  Pack="true"
				  PackagePath="analyzers/dotnet/cs"
				  Visible="false" />

			<!-- Add the DLL produced by the current project to the NuGet package -->
			<None Include="$(OutputPath)\$(AssemblyName).dll"
				  Pack="true"
				  PackagePath="analyzers/dotnet/cs"
				  Visible="false" />
		</ItemGroup>
	</Target>
	
	<ItemGroup>
		<None Include="README.md" Pack="true" PackagePath="\" />
		<None Update="LICENSE" Pack="true" PackagePath="\" />
	</ItemGroup>
	
</Project>
